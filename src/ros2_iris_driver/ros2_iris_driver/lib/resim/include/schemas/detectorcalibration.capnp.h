// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: detectorcalibration.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "semver.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ddb3705261b2c2cd);
CAPNP_DECLARE_SCHEMA(dfc0e30e0d12c213);
CAPNP_DECLARE_SCHEMA(d6f1f9f04706a612);
CAPNP_DECLARE_SCHEMA(80511de00bc40e2b);
CAPNP_DECLARE_SCHEMA(ba1793230427c5ba);
CAPNP_DECLARE_SCHEMA(b53b8718fa61f517);
CAPNP_DECLARE_SCHEMA(aa499e2540c2baa8);
CAPNP_DECLARE_SCHEMA(bffec29ac5f6a2e9);
CAPNP_DECLARE_SCHEMA(a7ee2bde16ef2b24);
CAPNP_DECLARE_SCHEMA(a2deb84f37438052);
CAPNP_DECLARE_SCHEMA(d02fd070a566b536);
CAPNP_DECLARE_SCHEMA(ab9cf7f9ed33d427);
CAPNP_DECLARE_SCHEMA(ec80ac873091eb8a);
CAPNP_DECLARE_SCHEMA(aba9b6efd9f990a4);
CAPNP_DECLARE_SCHEMA(d04c4316b5bd6915);
CAPNP_DECLARE_SCHEMA(ddc659d86aa31ae9);
CAPNP_DECLARE_SCHEMA(fbeade70d2ca683d);
CAPNP_DECLARE_SCHEMA(d554a2244880b6c2);

}  // namespace schemas
}  // namespace capnp

namespace ReSim {
namespace Schemas {

struct Calibration {
  Calibration() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Detector;
  struct Geometry;
  struct Site;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddb3705261b2c2cd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector {
  Detector() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t NUM_CHANNELS = 3u;
  struct Channel;
  struct Retro;
  struct Crosstalk;
  struct Wobscuration;
  struct Radiometry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfc0e30e0d12c213, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector::Channel {
  Channel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint16_t SIZE_RWC_TABLE = 512u;
  static constexpr  ::uint16_t SIZE_SCURVE_TABLE = 2u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80511de00bc40e2b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector::Retro {
  Retro() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa499e2540c2baa8, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector::Crosstalk {
  Crosstalk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bffec29ac5f6a2e9, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector::Wobscuration {
  Wobscuration() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7ee2bde16ef2b24, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Detector::Radiometry {
  Radiometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint16_t SIZE_RANGE_SCALE_TABLE = 32768u;
  static constexpr  ::uint16_t SIZE_SCURVE_TABLE = 4096u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2deb84f37438052, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Geometry {
  Geometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t NUM_POLYGON_FACES = 4u;
  struct PolygonFace;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec80ac873091eb8a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Geometry::PolygonFace {
  PolygonFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t NUM_COEFFICIENTS = 7u;
  struct Coefficients;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d04c4316b5bd6915, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Geometry::PolygonFace::Coefficients {
  Coefficients() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbeade70d2ca683d, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration::Site {
  Site() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d554a2244880b6c2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Calibration::Reader {
public:
  typedef Calibration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSites() const;
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Reader getSites() const;

  inline bool hasSemVer() const;
  inline  ::ReSim::Schemas::SemVer::Reader getSemVer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Builder {
public:
  typedef Calibration Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSites();
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Builder getSites();
  inline void setSites( ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Builder initSites(unsigned int size);
  inline void adoptSites(::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>> disownSites();

  inline bool hasSemVer();
  inline  ::ReSim::Schemas::SemVer::Builder getSemVer();
  inline void setSemVer( ::ReSim::Schemas::SemVer::Reader value);
  inline  ::ReSim::Schemas::SemVer::Builder initSemVer();
  inline void adoptSemVer(::capnp::Orphan< ::ReSim::Schemas::SemVer>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::SemVer> disownSemVer();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Pipeline {
public:
  typedef Calibration Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReSim::Schemas::SemVer::Pipeline getSemVer();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Reader {
public:
  typedef Detector Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRadiometry() const;
  inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Reader getRadiometry() const;

  inline bool hasRetro() const;
  inline  ::ReSim::Schemas::Calibration::Detector::Retro::Reader getRetro() const;

  inline bool hasChannel() const;
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Reader getChannel() const;

  inline bool hasCrosstalk() const;
  inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Reader getCrosstalk() const;

  inline bool hasWobscuration() const;
  inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Reader getWobscuration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Builder {
public:
  typedef Detector Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRadiometry();
  inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Builder getRadiometry();
  inline void setRadiometry( ::ReSim::Schemas::Calibration::Detector::Radiometry::Reader value);
  inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Builder initRadiometry();
  inline void adoptRadiometry(::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Radiometry>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Radiometry> disownRadiometry();

  inline bool hasRetro();
  inline  ::ReSim::Schemas::Calibration::Detector::Retro::Builder getRetro();
  inline void setRetro( ::ReSim::Schemas::Calibration::Detector::Retro::Reader value);
  inline  ::ReSim::Schemas::Calibration::Detector::Retro::Builder initRetro();
  inline void adoptRetro(::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Retro>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Retro> disownRetro();

  inline bool hasChannel();
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Builder getChannel();
  inline void setChannel( ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Builder initChannel(unsigned int size);
  inline void adoptChannel(::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>> disownChannel();

  inline bool hasCrosstalk();
  inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Builder getCrosstalk();
  inline void setCrosstalk( ::ReSim::Schemas::Calibration::Detector::Crosstalk::Reader value);
  inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Builder initCrosstalk();
  inline void adoptCrosstalk(::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Crosstalk>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Crosstalk> disownCrosstalk();

  inline bool hasWobscuration();
  inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Builder getWobscuration();
  inline void setWobscuration( ::ReSim::Schemas::Calibration::Detector::Wobscuration::Reader value);
  inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Builder initWobscuration();
  inline void adoptWobscuration(::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Wobscuration>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Wobscuration> disownWobscuration();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Pipeline {
public:
  typedef Detector Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Pipeline getRadiometry();
  inline  ::ReSim::Schemas::Calibration::Detector::Retro::Pipeline getRetro();
  inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Pipeline getCrosstalk();
  inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Pipeline getWobscuration();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Channel::Reader {
public:
  typedef Channel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRwc() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRwc() const;

  inline bool hasScurve() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getScurve() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Channel::Builder {
public:
  typedef Channel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRwc();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRwc();
  inline void setRwc( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRwc(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRwc(unsigned int size);
  inline void adoptRwc(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRwc();

  inline bool hasScurve();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getScurve();
  inline void setScurve( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setScurve(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initScurve(unsigned int size);
  inline void adoptScurve(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownScurve();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Channel::Pipeline {
public:
  typedef Channel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Retro::Reader {
public:
  typedef Retro Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getRangeOffset() const;

  inline float getIntensityThreshold() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Retro::Builder {
public:
  typedef Retro Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getRangeOffset();
  inline void setRangeOffset(float value);

  inline float getIntensityThreshold();
  inline void setIntensityThreshold(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Retro::Pipeline {
public:
  typedef Retro Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Crosstalk::Reader {
public:
  typedef Crosstalk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getMaxReflectanceThreshold() const;

  inline float getDistanceToleranceMeters() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Crosstalk::Builder {
public:
  typedef Crosstalk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getMaxReflectanceThreshold();
  inline void setMaxReflectanceThreshold(float value);

  inline float getDistanceToleranceMeters();
  inline void setDistanceToleranceMeters(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Crosstalk::Pipeline {
public:
  typedef Crosstalk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Wobscuration::Reader {
public:
  typedef Wobscuration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getThreshold() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Wobscuration::Builder {
public:
  typedef Wobscuration Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getThreshold();
  inline void setThreshold(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Wobscuration::Pipeline {
public:
  typedef Wobscuration Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Detector::Radiometry::Reader {
public:
  typedef Radiometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasIntensityRangeScale() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getIntensityRangeScale() const;

  inline bool hasScurve() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getScurve() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Detector::Radiometry::Builder {
public:
  typedef Radiometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIntensityRangeScale();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getIntensityRangeScale();
  inline void setIntensityRangeScale( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIntensityRangeScale(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initIntensityRangeScale(unsigned int size);
  inline void adoptIntensityRangeScale(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownIntensityRangeScale();

  inline bool hasScurve();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getScurve();
  inline void setScurve( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setScurve(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initScurve(unsigned int size);
  inline void adoptScurve(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownScurve();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Detector::Radiometry::Pipeline {
public:
  typedef Radiometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Geometry::Reader {
public:
  typedef Geometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPolygonFaces() const;
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Reader getPolygonFaces() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Geometry::Builder {
public:
  typedef Geometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPolygonFaces();
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Builder getPolygonFaces();
  inline void setPolygonFaces( ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Builder initPolygonFaces(unsigned int size);
  inline void adoptPolygonFaces(::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>> disownPolygonFaces();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Geometry::Pipeline {
public:
  typedef Geometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Geometry::PolygonFace::Reader {
public:
  typedef PolygonFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Coefficients::Reader getCoefficients() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Geometry::PolygonFace::Builder {
public:
  typedef PolygonFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Coefficients::Builder getCoefficients();
  inline typename Coefficients::Builder initCoefficients();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Geometry::PolygonFace::Pipeline {
public:
  typedef PolygonFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Coefficients::Pipeline getCoefficients();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Geometry::PolygonFace::Coefficients::Reader {
public:
  typedef Coefficients Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAz() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAz() const;

  inline bool hasEl() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getEl() const;

  inline bool hasRange() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRange() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Geometry::PolygonFace::Coefficients::Builder {
public:
  typedef Coefficients Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAz();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAz();
  inline void setAz( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAz(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAz(unsigned int size);
  inline void adoptAz(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAz();

  inline bool hasEl();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getEl();
  inline void setEl( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setEl(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initEl(unsigned int size);
  inline void adoptEl(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownEl();

  inline bool hasRange();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRange();
  inline void setRange( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRange(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRange(unsigned int size);
  inline void adoptRange(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRange();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Geometry::PolygonFace::Coefficients::Pipeline {
public:
  typedef Coefficients Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Site::Reader {
public:
  typedef Site Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDetector() const;
  inline  ::ReSim::Schemas::Calibration::Detector::Reader getDetector() const;

  inline bool hasGeometry() const;
  inline  ::ReSim::Schemas::Calibration::Geometry::Reader getGeometry() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Site::Builder {
public:
  typedef Site Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDetector();
  inline  ::ReSim::Schemas::Calibration::Detector::Builder getDetector();
  inline void setDetector( ::ReSim::Schemas::Calibration::Detector::Reader value);
  inline  ::ReSim::Schemas::Calibration::Detector::Builder initDetector();
  inline void adoptDetector(::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector> disownDetector();

  inline bool hasGeometry();
  inline  ::ReSim::Schemas::Calibration::Geometry::Builder getGeometry();
  inline void setGeometry( ::ReSim::Schemas::Calibration::Geometry::Reader value);
  inline  ::ReSim::Schemas::Calibration::Geometry::Builder initGeometry();
  inline void adoptGeometry(::capnp::Orphan< ::ReSim::Schemas::Calibration::Geometry>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Geometry> disownGeometry();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Site::Pipeline {
public:
  typedef Site Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReSim::Schemas::Calibration::Detector::Pipeline getDetector();
  inline  ::ReSim::Schemas::Calibration::Geometry::Pipeline getGeometry();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Calibration::Reader::hasSites() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Builder::hasSites() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Reader Calibration::Reader::getSites() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Builder Calibration::Builder::getSites() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Builder::setSites( ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>::Builder Calibration::Builder::initSites(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Calibration::Builder::adoptSites(
    ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>> Calibration::Builder::disownSites() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Site,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Reader::hasSemVer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Builder::hasSemVer() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::SemVer::Reader Calibration::Reader::getSemVer() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_ddb3705261b2c2cd + 64);
}
inline  ::ReSim::Schemas::SemVer::Builder Calibration::Builder::getSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_ddb3705261b2c2cd + 64);
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::SemVer::Pipeline Calibration::Pipeline::getSemVer() {
  return  ::ReSim::Schemas::SemVer::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Calibration::Builder::setSemVer( ::ReSim::Schemas::SemVer::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::SemVer::Builder Calibration::Builder::initSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Builder::adoptSemVer(
    ::capnp::Orphan< ::ReSim::Schemas::SemVer>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::SemVer> Calibration::Builder::disownSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Reader::hasRadiometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Builder::hasRadiometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Reader Calibration::Detector::Reader::getRadiometry() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Builder Calibration::Detector::Builder::getRadiometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Pipeline Calibration::Detector::Pipeline::getRadiometry() {
  return  ::ReSim::Schemas::Calibration::Detector::Radiometry::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Calibration::Detector::Builder::setRadiometry( ::ReSim::Schemas::Calibration::Detector::Radiometry::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Detector::Radiometry::Builder Calibration::Detector::Builder::initRadiometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Builder::adoptRadiometry(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Radiometry>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Radiometry> Calibration::Detector::Builder::disownRadiometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Radiometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Reader::hasRetro() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Builder::hasRetro() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Detector::Retro::Reader Calibration::Detector::Reader::getRetro() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Detector::Retro::Builder Calibration::Detector::Builder::getRetro() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Detector::Retro::Pipeline Calibration::Detector::Pipeline::getRetro() {
  return  ::ReSim::Schemas::Calibration::Detector::Retro::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Calibration::Detector::Builder::setRetro( ::ReSim::Schemas::Calibration::Detector::Retro::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Detector::Retro::Builder Calibration::Detector::Builder::initRetro() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Builder::adoptRetro(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Retro>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Retro> Calibration::Detector::Builder::disownRetro() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Retro>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Reader::hasChannel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Builder::hasChannel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Reader Calibration::Detector::Reader::getChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Builder Calibration::Detector::Builder::getChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Builder::setChannel( ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>::Builder Calibration::Detector::Builder::initChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Calibration::Detector::Builder::adoptChannel(
    ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>> Calibration::Detector::Builder::disownChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Detector::Channel,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Reader::hasCrosstalk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Builder::hasCrosstalk() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Reader Calibration::Detector::Reader::getCrosstalk() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Builder Calibration::Detector::Builder::getCrosstalk() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Pipeline Calibration::Detector::Pipeline::getCrosstalk() {
  return  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Calibration::Detector::Builder::setCrosstalk( ::ReSim::Schemas::Calibration::Detector::Crosstalk::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Detector::Crosstalk::Builder Calibration::Detector::Builder::initCrosstalk() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Builder::adoptCrosstalk(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Crosstalk>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Crosstalk> Calibration::Detector::Builder::disownCrosstalk() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Crosstalk>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Reader::hasWobscuration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Builder::hasWobscuration() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Reader Calibration::Detector::Reader::getWobscuration() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Builder Calibration::Detector::Builder::getWobscuration() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Pipeline Calibration::Detector::Pipeline::getWobscuration() {
  return  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Calibration::Detector::Builder::setWobscuration( ::ReSim::Schemas::Calibration::Detector::Wobscuration::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Detector::Wobscuration::Builder Calibration::Detector::Builder::initWobscuration() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Builder::adoptWobscuration(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Wobscuration>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector::Wobscuration> Calibration::Detector::Builder::disownWobscuration() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector::Wobscuration>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Channel::Reader::hasRwc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Channel::Builder::hasRwc() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Detector::Channel::Reader::getRwc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Channel::Builder::getRwc() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Channel::Builder::setRwc( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Calibration::Detector::Channel::Builder::setRwc(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Channel::Builder::initRwc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Calibration::Detector::Channel::Builder::adoptRwc(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Detector::Channel::Builder::disownRwc() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Channel::Reader::hasScurve() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Channel::Builder::hasScurve() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Detector::Channel::Reader::getScurve() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Channel::Builder::getScurve() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Channel::Builder::setScurve( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Calibration::Detector::Channel::Builder::setScurve(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Channel::Builder::initScurve(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Calibration::Detector::Channel::Builder::adoptScurve(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Detector::Channel::Builder::disownScurve() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float Calibration::Detector::Retro::Reader::getRangeOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Calibration::Detector::Retro::Builder::getRangeOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Calibration::Detector::Retro::Builder::setRangeOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Calibration::Detector::Retro::Reader::getIntensityThreshold() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1148846080u);
}

inline float Calibration::Detector::Retro::Builder::getIntensityThreshold() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1148846080u);
}
inline void Calibration::Detector::Retro::Builder::setIntensityThreshold(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1148846080u);
}

inline float Calibration::Detector::Crosstalk::Reader::getMaxReflectanceThreshold() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1041865114u);
}

inline float Calibration::Detector::Crosstalk::Builder::getMaxReflectanceThreshold() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1041865114u);
}
inline void Calibration::Detector::Crosstalk::Builder::setMaxReflectanceThreshold(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1041865114u);
}

inline float Calibration::Detector::Crosstalk::Reader::getDistanceToleranceMeters() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1066192077u);
}

inline float Calibration::Detector::Crosstalk::Builder::getDistanceToleranceMeters() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1066192077u);
}
inline void Calibration::Detector::Crosstalk::Builder::setDistanceToleranceMeters(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1066192077u);
}

inline float Calibration::Detector::Wobscuration::Reader::getThreshold() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1152073728u);
}

inline float Calibration::Detector::Wobscuration::Builder::getThreshold() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1152073728u);
}
inline void Calibration::Detector::Wobscuration::Builder::setThreshold(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1152073728u);
}

inline bool Calibration::Detector::Radiometry::Reader::hasIntensityRangeScale() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Radiometry::Builder::hasIntensityRangeScale() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Detector::Radiometry::Reader::getIntensityRangeScale() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Radiometry::Builder::getIntensityRangeScale() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Radiometry::Builder::setIntensityRangeScale( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Calibration::Detector::Radiometry::Builder::setIntensityRangeScale(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Radiometry::Builder::initIntensityRangeScale(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Calibration::Detector::Radiometry::Builder::adoptIntensityRangeScale(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Detector::Radiometry::Builder::disownIntensityRangeScale() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Detector::Radiometry::Reader::hasScurve() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Detector::Radiometry::Builder::hasScurve() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Detector::Radiometry::Reader::getScurve() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Radiometry::Builder::getScurve() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Detector::Radiometry::Builder::setScurve( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Calibration::Detector::Radiometry::Builder::setScurve(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Detector::Radiometry::Builder::initScurve(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Calibration::Detector::Radiometry::Builder::adoptScurve(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Detector::Radiometry::Builder::disownScurve() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Calibration::Geometry::Reader::hasPolygonFaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Geometry::Builder::hasPolygonFaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Reader Calibration::Geometry::Reader::getPolygonFaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Builder Calibration::Geometry::Builder::getPolygonFaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Geometry::Builder::setPolygonFaces( ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>::Builder Calibration::Geometry::Builder::initPolygonFaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Calibration::Geometry::Builder::adoptPolygonFaces(
    ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>> Calibration::Geometry::Builder::disownPolygonFaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::Calibration::Geometry::PolygonFace,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Calibration::Geometry::PolygonFace::Coefficients::Reader Calibration::Geometry::PolygonFace::Reader::getCoefficients() const {
  return typename Calibration::Geometry::PolygonFace::Coefficients::Reader(_reader);
}
inline typename Calibration::Geometry::PolygonFace::Coefficients::Builder Calibration::Geometry::PolygonFace::Builder::getCoefficients() {
  return typename Calibration::Geometry::PolygonFace::Coefficients::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Calibration::Geometry::PolygonFace::Coefficients::Pipeline Calibration::Geometry::PolygonFace::Pipeline::getCoefficients() {
  return typename Calibration::Geometry::PolygonFace::Coefficients::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Calibration::Geometry::PolygonFace::Coefficients::Builder Calibration::Geometry::PolygonFace::Builder::initCoefficients() {
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Calibration::Geometry::PolygonFace::Coefficients::Builder(_builder);
}
inline bool Calibration::Geometry::PolygonFace::Coefficients::Reader::hasAz() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Geometry::PolygonFace::Coefficients::Builder::hasAz() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Geometry::PolygonFace::Coefficients::Reader::getAz() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::getAz() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setAz( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setAz(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::initAz(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::adoptAz(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Geometry::PolygonFace::Coefficients::Builder::disownAz() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Geometry::PolygonFace::Coefficients::Reader::hasEl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Geometry::PolygonFace::Coefficients::Builder::hasEl() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Geometry::PolygonFace::Coefficients::Reader::getEl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::getEl() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setEl( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setEl(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::initEl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::adoptEl(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Geometry::PolygonFace::Coefficients::Builder::disownEl() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Calibration::Geometry::PolygonFace::Coefficients::Reader::hasRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Geometry::PolygonFace::Coefficients::Builder::hasRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Calibration::Geometry::PolygonFace::Coefficients::Reader::getRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::getRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setRange( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::setRange(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Calibration::Geometry::PolygonFace::Coefficients::Builder::initRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Calibration::Geometry::PolygonFace::Coefficients::Builder::adoptRange(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Calibration::Geometry::PolygonFace::Coefficients::Builder::disownRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Calibration::Site::Reader::hasDetector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Site::Builder::hasDetector() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Detector::Reader Calibration::Site::Reader::getDetector() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Detector::Builder Calibration::Site::Builder::getDetector() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Detector::Pipeline Calibration::Site::Pipeline::getDetector() {
  return  ::ReSim::Schemas::Calibration::Detector::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Calibration::Site::Builder::setDetector( ::ReSim::Schemas::Calibration::Detector::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Detector::Builder Calibration::Site::Builder::initDetector() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Calibration::Site::Builder::adoptDetector(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Detector> Calibration::Site::Builder::disownDetector() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Detector>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Calibration::Site::Reader::hasGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Calibration::Site::Builder::hasGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Calibration::Geometry::Reader Calibration::Site::Reader::getGeometry() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Calibration::Geometry::Builder Calibration::Site::Builder::getGeometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Calibration::Geometry::Pipeline Calibration::Site::Pipeline::getGeometry() {
  return  ::ReSim::Schemas::Calibration::Geometry::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Calibration::Site::Builder::setGeometry( ::ReSim::Schemas::Calibration::Geometry::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Calibration::Geometry::Builder Calibration::Site::Builder::initGeometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Calibration::Site::Builder::adoptGeometry(
    ::capnp::Orphan< ::ReSim::Schemas::Calibration::Geometry>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Calibration::Geometry> Calibration::Site::Builder::disownGeometry() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Calibration::Geometry>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

