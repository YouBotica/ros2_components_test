// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: pointcloud.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "roic705.capnp.h"
#include "semver.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b303ecab811cd9b7);
CAPNP_DECLARE_SCHEMA(ff5e1700a57472a3);
CAPNP_DECLARE_SCHEMA(a2dfa7dc6c553c17);

}  // namespace schemas
}  // namespace capnp

namespace ReSim {
namespace Schemas {

struct PointCloud {
  PointCloud() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Return;
  struct Ray;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b303ecab811cd9b7, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PointCloud::Return {
  Return() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff5e1700a57472a3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PointCloud::Ray {
  Ray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2dfa7dc6c553c17, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PointCloud::Reader {
public:
  typedef PointCloud Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSemVer() const;
  inline  ::ReSim::Schemas::SemVer::Reader getSemVer() const;

  inline bool hasDetectorConfig() const;
  inline  ::ReSim::Schemas::Roic705::Config::Reader getDetectorConfig() const;

  inline bool hasRays() const;
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Reader getRays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PointCloud::Builder {
public:
  typedef PointCloud Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSemVer();
  inline  ::ReSim::Schemas::SemVer::Builder getSemVer();
  inline void setSemVer( ::ReSim::Schemas::SemVer::Reader value);
  inline  ::ReSim::Schemas::SemVer::Builder initSemVer();
  inline void adoptSemVer(::capnp::Orphan< ::ReSim::Schemas::SemVer>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::SemVer> disownSemVer();

  inline bool hasDetectorConfig();
  inline  ::ReSim::Schemas::Roic705::Config::Builder getDetectorConfig();
  inline void setDetectorConfig( ::ReSim::Schemas::Roic705::Config::Reader value);
  inline  ::ReSim::Schemas::Roic705::Config::Builder initDetectorConfig();
  inline void adoptDetectorConfig(::capnp::Orphan< ::ReSim::Schemas::Roic705::Config>&& value);
  inline ::capnp::Orphan< ::ReSim::Schemas::Roic705::Config> disownDetectorConfig();

  inline bool hasRays();
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Builder getRays();
  inline void setRays( ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Builder initRays(unsigned int size);
  inline void adoptRays(::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>> disownRays();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PointCloud::Pipeline {
public:
  typedef PointCloud Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReSim::Schemas::SemVer::Pipeline getSemVer();
  inline  ::ReSim::Schemas::Roic705::Config::Pipeline getDetectorConfig();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PointCloud::Return::Reader {
public:
  typedef Return Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getRange() const;

  inline float getReflectance() const;

  inline float getExistenceProbability() const;

  inline  ::uint16_t getDebugBits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PointCloud::Return::Builder {
public:
  typedef Return Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getRange();
  inline void setRange(float value);

  inline float getReflectance();
  inline void setReflectance(float value);

  inline float getExistenceProbability();
  inline void setExistenceProbability(float value);

  inline  ::uint16_t getDebugBits();
  inline void setDebugBits( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PointCloud::Return::Pipeline {
public:
  typedef Return Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PointCloud::Ray::Reader {
public:
  typedef Ray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAzAngle() const;

  inline float getElAngle() const;

  inline  ::uint8_t getSite() const;

  inline  ::uint8_t getPolygonFace() const;

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint8_t getFrameIndex() const;

  inline  ::uint8_t getCheckpoint() const;

  inline  ::uint8_t getScanProfile() const;

  inline  ::uint8_t getSsi() const;

  inline bool hasReturns() const;
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Reader getReturns() const;

  inline bool getValid() const;

  inline  ::uint8_t getBlockageLevel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PointCloud::Ray::Builder {
public:
  typedef Ray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAzAngle();
  inline void setAzAngle(float value);

  inline float getElAngle();
  inline void setElAngle(float value);

  inline  ::uint8_t getSite();
  inline void setSite( ::uint8_t value);

  inline  ::uint8_t getPolygonFace();
  inline void setPolygonFace( ::uint8_t value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint8_t getFrameIndex();
  inline void setFrameIndex( ::uint8_t value);

  inline  ::uint8_t getCheckpoint();
  inline void setCheckpoint( ::uint8_t value);

  inline  ::uint8_t getScanProfile();
  inline void setScanProfile( ::uint8_t value);

  inline  ::uint8_t getSsi();
  inline void setSsi( ::uint8_t value);

  inline bool hasReturns();
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Builder getReturns();
  inline void setReturns( ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Builder initReturns(unsigned int size);
  inline void adoptReturns(::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>> disownReturns();

  inline bool getValid();
  inline void setValid(bool value);

  inline  ::uint8_t getBlockageLevel();
  inline void setBlockageLevel( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PointCloud::Ray::Pipeline {
public:
  typedef Ray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PointCloud::Reader::hasSemVer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PointCloud::Builder::hasSemVer() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::SemVer::Reader PointCloud::Reader::getSemVer() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_b303ecab811cd9b7 + 53);
}
inline  ::ReSim::Schemas::SemVer::Builder PointCloud::Builder::getSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_b303ecab811cd9b7 + 53);
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::SemVer::Pipeline PointCloud::Pipeline::getSemVer() {
  return  ::ReSim::Schemas::SemVer::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PointCloud::Builder::setSemVer( ::ReSim::Schemas::SemVer::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::SemVer::Builder PointCloud::Builder::initSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PointCloud::Builder::adoptSemVer(
    ::capnp::Orphan< ::ReSim::Schemas::SemVer>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::SemVer> PointCloud::Builder::disownSemVer() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::SemVer>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PointCloud::Reader::hasDetectorConfig() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PointCloud::Builder::hasDetectorConfig() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ReSim::Schemas::Roic705::Config::Reader PointCloud::Reader::getDetectorConfig() const {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ReSim::Schemas::Roic705::Config::Builder PointCloud::Builder::getDetectorConfig() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReSim::Schemas::Roic705::Config::Pipeline PointCloud::Pipeline::getDetectorConfig() {
  return  ::ReSim::Schemas::Roic705::Config::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PointCloud::Builder::setDetectorConfig( ::ReSim::Schemas::Roic705::Config::Reader value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ReSim::Schemas::Roic705::Config::Builder PointCloud::Builder::initDetectorConfig() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PointCloud::Builder::adoptDetectorConfig(
    ::capnp::Orphan< ::ReSim::Schemas::Roic705::Config>&& value) {
  ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReSim::Schemas::Roic705::Config> PointCloud::Builder::disownDetectorConfig() {
  return ::capnp::_::PointerHelpers< ::ReSim::Schemas::Roic705::Config>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PointCloud::Reader::hasRays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PointCloud::Builder::hasRays() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Reader PointCloud::Reader::getRays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Builder PointCloud::Builder::getRays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PointCloud::Builder::setRays( ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>::Builder PointCloud::Builder::initRays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PointCloud::Builder::adoptRays(
    ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>> PointCloud::Builder::disownRays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Ray,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float PointCloud::Return::Reader::getRange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float PointCloud::Return::Builder::getRange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Return::Builder::setRange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PointCloud::Return::Reader::getReflectance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PointCloud::Return::Builder::getReflectance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Return::Builder::setReflectance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PointCloud::Return::Reader::getExistenceProbability() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PointCloud::Return::Builder::getExistenceProbability() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Return::Builder::setExistenceProbability(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PointCloud::Return::Reader::getDebugBits() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PointCloud::Return::Builder::getDebugBits() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Return::Builder::setDebugBits( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float PointCloud::Ray::Reader::getAzAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float PointCloud::Ray::Builder::getAzAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setAzAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PointCloud::Ray::Reader::getElAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PointCloud::Ray::Builder::getElAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setElAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getSite() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getSite() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setSite( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getPolygonFace() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getPolygonFace() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setPolygonFace( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PointCloud::Ray::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PointCloud::Ray::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getFrameIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getFrameIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setFrameIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getCheckpoint() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getCheckpoint() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setCheckpoint( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getScanProfile() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getScanProfile() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setScanProfile( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getSsi() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getSsi() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setSsi( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool PointCloud::Ray::Reader::hasReturns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PointCloud::Ray::Builder::hasReturns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Reader PointCloud::Ray::Reader::getReturns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Builder PointCloud::Ray::Builder::getReturns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PointCloud::Ray::Builder::setReturns( ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>::Builder PointCloud::Ray::Builder::initReturns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PointCloud::Ray::Builder::adoptReturns(
    ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>> PointCloud::Ray::Builder::disownReturns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ReSim::Schemas::PointCloud::Return,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PointCloud::Ray::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}

inline bool PointCloud::Ray::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointCloud::Ray::Reader::getBlockageLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointCloud::Ray::Builder::getBlockageLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void PointCloud::Ray::Builder::setBlockageLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

