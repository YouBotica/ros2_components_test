########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated FindCapnProto.cmake")
set(CapnProto_FOUND 1)
set(CapnProto_VERSION "0.9.1")

find_package_handle_standard_args(CapnProto REQUIRED_VARS
                                  CapnProto_VERSION VERSION_VAR CapnProto_VERSION)
mark_as_advanced(CapnProto_FOUND CapnProto_VERSION)

set(CapnProto_COMPONENTS CapnProto::capnp-json CapnProto::capnpc CapnProto::capnp-websocket CapnProto::capnp-rpc CapnProto::capnp CapnProto::kj-http CapnProto::kj-async CapnProto::kj)

if(CapnProto_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${CapnProto_FIND_COMPONENTS})
        list(FIND CapnProto_COMPONENTS "CapnProto::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'CapnProto'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'CapnProto'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(CapnProto_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_RES_DIRS )
set(CapnProto_DEFINITIONS )
set(CapnProto_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(CapnProto_COMPILE_DEFINITIONS )
set(CapnProto_COMPILE_OPTIONS_LIST "" "")
set(CapnProto_COMPILE_OPTIONS_C "")
set(CapnProto_COMPILE_OPTIONS_CXX "")
set(CapnProto_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(CapnProto_LIBRARIES "") # Will be filled later
set(CapnProto_LIBS "") # Same as CapnProto_LIBRARIES
set(CapnProto_SYSTEM_LIBS pthread)
set(CapnProto_FRAMEWORK_DIRS )
set(CapnProto_FRAMEWORKS )
set(CapnProto_FRAMEWORKS_FOUND "") # Will be filled later
set(CapnProto_BUILD_MODULES_PATHS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto/CapnProtoMacros.cmake")

conan_find_apple_frameworks(CapnProto_FRAMEWORKS_FOUND "${CapnProto_FRAMEWORKS}" "${CapnProto_FRAMEWORK_DIRS}")

mark_as_advanced(CapnProto_INCLUDE_DIRS
                 CapnProto_INCLUDE_DIR
                 CapnProto_INCLUDES
                 CapnProto_DEFINITIONS
                 CapnProto_LINKER_FLAGS_LIST
                 CapnProto_COMPILE_DEFINITIONS
                 CapnProto_COMPILE_OPTIONS_LIST
                 CapnProto_LIBRARIES
                 CapnProto_LIBS
                 CapnProto_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to CapnProto_LIBS and CapnProto_LIBRARY_LIST
set(CapnProto_LIBRARY_LIST capnp-json capnpc capnp-websocket capnp-rpc capnp kj-http kj-async kj)
set(CapnProto_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_CapnProto_DEPENDENCIES "${CapnProto_FRAMEWORKS_FOUND} ${CapnProto_SYSTEM_LIBS} ")

conan_package_library_targets("${CapnProto_LIBRARY_LIST}"  # libraries
                              "${CapnProto_LIB_DIRS}"      # package_libdir
                              "${_CapnProto_DEPENDENCIES}"  # deps
                              CapnProto_LIBRARIES            # out_libraries
                              CapnProto_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "CapnProto")                                      # package_name

set(CapnProto_LIBS ${CapnProto_LIBRARIES})

foreach(_FRAMEWORK ${CapnProto_FRAMEWORKS_FOUND})
    list(APPEND CapnProto_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND CapnProto_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${CapnProto_SYSTEM_LIBS})
    list(APPEND CapnProto_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND CapnProto_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(CapnProto_LIBRARIES_TARGETS "${CapnProto_LIBRARIES_TARGETS};")
set(CapnProto_LIBRARIES "${CapnProto_LIBRARIES};")

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})


########### COMPONENT kj VARIABLES #############################################

set(CapnProto_kj_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_kj_RES_DIRS )
set(CapnProto_kj_DEFINITIONS )
set(CapnProto_kj_COMPILE_DEFINITIONS )
set(CapnProto_kj_COMPILE_OPTIONS_C "")
set(CapnProto_kj_COMPILE_OPTIONS_CXX "")
set(CapnProto_kj_LIBS kj)
set(CapnProto_kj_SYSTEM_LIBS pthread)
set(CapnProto_kj_FRAMEWORK_DIRS )
set(CapnProto_kj_FRAMEWORKS )
set(CapnProto_kj_BUILD_MODULES_PATHS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto/CapnProtoMacros.cmake")
set(CapnProto_kj_DEPENDENCIES )
set(CapnProto_kj_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT kj-async VARIABLES #############################################

set(CapnProto_kj-async_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-async_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-async_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-async_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_kj-async_RES_DIRS )
set(CapnProto_kj-async_DEFINITIONS )
set(CapnProto_kj-async_COMPILE_DEFINITIONS )
set(CapnProto_kj-async_COMPILE_OPTIONS_C "")
set(CapnProto_kj-async_COMPILE_OPTIONS_CXX "")
set(CapnProto_kj-async_LIBS kj-async)
set(CapnProto_kj-async_SYSTEM_LIBS pthread)
set(CapnProto_kj-async_FRAMEWORK_DIRS )
set(CapnProto_kj-async_FRAMEWORKS )
set(CapnProto_kj-async_BUILD_MODULES_PATHS )
set(CapnProto_kj-async_DEPENDENCIES CapnProto::kj)
set(CapnProto_kj-async_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT kj-http VARIABLES #############################################

set(CapnProto_kj-http_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-http_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-http_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_kj-http_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_kj-http_RES_DIRS )
set(CapnProto_kj-http_DEFINITIONS )
set(CapnProto_kj-http_COMPILE_DEFINITIONS )
set(CapnProto_kj-http_COMPILE_OPTIONS_C "")
set(CapnProto_kj-http_COMPILE_OPTIONS_CXX "")
set(CapnProto_kj-http_LIBS kj-http)
set(CapnProto_kj-http_SYSTEM_LIBS )
set(CapnProto_kj-http_FRAMEWORK_DIRS )
set(CapnProto_kj-http_FRAMEWORKS )
set(CapnProto_kj-http_BUILD_MODULES_PATHS )
set(CapnProto_kj-http_DEPENDENCIES CapnProto::kj CapnProto::kj-async)
set(CapnProto_kj-http_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT capnp VARIABLES #############################################

set(CapnProto_capnp_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_capnp_RES_DIRS )
set(CapnProto_capnp_DEFINITIONS )
set(CapnProto_capnp_COMPILE_DEFINITIONS )
set(CapnProto_capnp_COMPILE_OPTIONS_C "")
set(CapnProto_capnp_COMPILE_OPTIONS_CXX "")
set(CapnProto_capnp_LIBS capnp)
set(CapnProto_capnp_SYSTEM_LIBS )
set(CapnProto_capnp_FRAMEWORK_DIRS )
set(CapnProto_capnp_FRAMEWORKS )
set(CapnProto_capnp_BUILD_MODULES_PATHS )
set(CapnProto_capnp_DEPENDENCIES CapnProto::kj)
set(CapnProto_capnp_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT capnp-rpc VARIABLES #############################################

set(CapnProto_capnp-rpc_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-rpc_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-rpc_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-rpc_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_capnp-rpc_RES_DIRS )
set(CapnProto_capnp-rpc_DEFINITIONS )
set(CapnProto_capnp-rpc_COMPILE_DEFINITIONS )
set(CapnProto_capnp-rpc_COMPILE_OPTIONS_C "")
set(CapnProto_capnp-rpc_COMPILE_OPTIONS_CXX "")
set(CapnProto_capnp-rpc_LIBS capnp-rpc)
set(CapnProto_capnp-rpc_SYSTEM_LIBS )
set(CapnProto_capnp-rpc_FRAMEWORK_DIRS )
set(CapnProto_capnp-rpc_FRAMEWORKS )
set(CapnProto_capnp-rpc_BUILD_MODULES_PATHS )
set(CapnProto_capnp-rpc_DEPENDENCIES CapnProto::capnp CapnProto::kj CapnProto::kj-async)
set(CapnProto_capnp-rpc_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT capnp-websocket VARIABLES #############################################

set(CapnProto_capnp-websocket_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-websocket_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-websocket_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-websocket_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_capnp-websocket_RES_DIRS )
set(CapnProto_capnp-websocket_DEFINITIONS )
set(CapnProto_capnp-websocket_COMPILE_DEFINITIONS )
set(CapnProto_capnp-websocket_COMPILE_OPTIONS_C "")
set(CapnProto_capnp-websocket_COMPILE_OPTIONS_CXX "")
set(CapnProto_capnp-websocket_LIBS capnp-websocket)
set(CapnProto_capnp-websocket_SYSTEM_LIBS )
set(CapnProto_capnp-websocket_FRAMEWORK_DIRS )
set(CapnProto_capnp-websocket_FRAMEWORKS )
set(CapnProto_capnp-websocket_BUILD_MODULES_PATHS )
set(CapnProto_capnp-websocket_DEPENDENCIES CapnProto::capnp CapnProto::capnp-rpc CapnProto::kj-http CapnProto::kj-async CapnProto::kj)
set(CapnProto_capnp-websocket_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT capnpc VARIABLES #############################################

set(CapnProto_capnpc_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnpc_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnpc_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnpc_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_capnpc_RES_DIRS )
set(CapnProto_capnpc_DEFINITIONS )
set(CapnProto_capnpc_COMPILE_DEFINITIONS )
set(CapnProto_capnpc_COMPILE_OPTIONS_C "")
set(CapnProto_capnpc_COMPILE_OPTIONS_CXX "")
set(CapnProto_capnpc_LIBS capnpc)
set(CapnProto_capnpc_SYSTEM_LIBS pthread)
set(CapnProto_capnpc_FRAMEWORK_DIRS )
set(CapnProto_capnpc_FRAMEWORKS )
set(CapnProto_capnpc_BUILD_MODULES_PATHS )
set(CapnProto_capnpc_DEPENDENCIES CapnProto::capnp CapnProto::kj)
set(CapnProto_capnpc_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT capnp-json VARIABLES #############################################

set(CapnProto_capnp-json_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-json_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-json_INCLUDES "${CMAKE_CURRENT_LIST_DIR}/capnproto/include")
set(CapnProto_capnp-json_LIB_DIRS "${CMAKE_CURRENT_LIST_DIR}/capnproto/lib")
set(CapnProto_capnp-json_RES_DIRS )
set(CapnProto_capnp-json_DEFINITIONS )
set(CapnProto_capnp-json_COMPILE_DEFINITIONS )
set(CapnProto_capnp-json_COMPILE_OPTIONS_C "")
set(CapnProto_capnp-json_COMPILE_OPTIONS_CXX "")
set(CapnProto_capnp-json_LIBS capnp-json)
set(CapnProto_capnp-json_SYSTEM_LIBS )
set(CapnProto_capnp-json_FRAMEWORK_DIRS )
set(CapnProto_capnp-json_FRAMEWORKS )
set(CapnProto_capnp-json_BUILD_MODULES_PATHS )
set(CapnProto_capnp-json_DEPENDENCIES CapnProto::capnp CapnProto::kj)
set(CapnProto_capnp-json_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT kj FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_kj_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_kj_FRAMEWORKS_FOUND "${CapnProto_kj_FRAMEWORKS}" "${CapnProto_kj_FRAMEWORK_DIRS}")

set(CapnProto_kj_LIB_TARGETS "")
set(CapnProto_kj_NOT_USED "")
set(CapnProto_kj_LIBS_FRAMEWORKS_DEPS ${CapnProto_kj_FRAMEWORKS_FOUND} ${CapnProto_kj_SYSTEM_LIBS} ${CapnProto_kj_DEPENDENCIES})
conan_package_library_targets("${CapnProto_kj_LIBS}"
                              "${CapnProto_kj_LIB_DIRS}"
                              "${CapnProto_kj_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_kj_NOT_USED
                              CapnProto_kj_LIB_TARGETS
                              ""
                              "CapnProto_kj")

set(CapnProto_kj_LINK_LIBS ${CapnProto_kj_LIB_TARGETS} ${CapnProto_kj_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT kj-async FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_kj-async_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_kj-async_FRAMEWORKS_FOUND "${CapnProto_kj-async_FRAMEWORKS}" "${CapnProto_kj-async_FRAMEWORK_DIRS}")

set(CapnProto_kj-async_LIB_TARGETS "")
set(CapnProto_kj-async_NOT_USED "")
set(CapnProto_kj-async_LIBS_FRAMEWORKS_DEPS ${CapnProto_kj-async_FRAMEWORKS_FOUND} ${CapnProto_kj-async_SYSTEM_LIBS} ${CapnProto_kj-async_DEPENDENCIES})
conan_package_library_targets("${CapnProto_kj-async_LIBS}"
                              "${CapnProto_kj-async_LIB_DIRS}"
                              "${CapnProto_kj-async_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_kj-async_NOT_USED
                              CapnProto_kj-async_LIB_TARGETS
                              ""
                              "CapnProto_kj-async")

set(CapnProto_kj-async_LINK_LIBS ${CapnProto_kj-async_LIB_TARGETS} ${CapnProto_kj-async_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT kj-http FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_kj-http_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_kj-http_FRAMEWORKS_FOUND "${CapnProto_kj-http_FRAMEWORKS}" "${CapnProto_kj-http_FRAMEWORK_DIRS}")

set(CapnProto_kj-http_LIB_TARGETS "")
set(CapnProto_kj-http_NOT_USED "")
set(CapnProto_kj-http_LIBS_FRAMEWORKS_DEPS ${CapnProto_kj-http_FRAMEWORKS_FOUND} ${CapnProto_kj-http_SYSTEM_LIBS} ${CapnProto_kj-http_DEPENDENCIES})
conan_package_library_targets("${CapnProto_kj-http_LIBS}"
                              "${CapnProto_kj-http_LIB_DIRS}"
                              "${CapnProto_kj-http_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_kj-http_NOT_USED
                              CapnProto_kj-http_LIB_TARGETS
                              ""
                              "CapnProto_kj-http")

set(CapnProto_kj-http_LINK_LIBS ${CapnProto_kj-http_LIB_TARGETS} ${CapnProto_kj-http_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT capnp FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_capnp_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_capnp_FRAMEWORKS_FOUND "${CapnProto_capnp_FRAMEWORKS}" "${CapnProto_capnp_FRAMEWORK_DIRS}")

set(CapnProto_capnp_LIB_TARGETS "")
set(CapnProto_capnp_NOT_USED "")
set(CapnProto_capnp_LIBS_FRAMEWORKS_DEPS ${CapnProto_capnp_FRAMEWORKS_FOUND} ${CapnProto_capnp_SYSTEM_LIBS} ${CapnProto_capnp_DEPENDENCIES})
conan_package_library_targets("${CapnProto_capnp_LIBS}"
                              "${CapnProto_capnp_LIB_DIRS}"
                              "${CapnProto_capnp_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_capnp_NOT_USED
                              CapnProto_capnp_LIB_TARGETS
                              ""
                              "CapnProto_capnp")

set(CapnProto_capnp_LINK_LIBS ${CapnProto_capnp_LIB_TARGETS} ${CapnProto_capnp_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT capnp-rpc FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_capnp-rpc_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_capnp-rpc_FRAMEWORKS_FOUND "${CapnProto_capnp-rpc_FRAMEWORKS}" "${CapnProto_capnp-rpc_FRAMEWORK_DIRS}")

set(CapnProto_capnp-rpc_LIB_TARGETS "")
set(CapnProto_capnp-rpc_NOT_USED "")
set(CapnProto_capnp-rpc_LIBS_FRAMEWORKS_DEPS ${CapnProto_capnp-rpc_FRAMEWORKS_FOUND} ${CapnProto_capnp-rpc_SYSTEM_LIBS} ${CapnProto_capnp-rpc_DEPENDENCIES})
conan_package_library_targets("${CapnProto_capnp-rpc_LIBS}"
                              "${CapnProto_capnp-rpc_LIB_DIRS}"
                              "${CapnProto_capnp-rpc_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_capnp-rpc_NOT_USED
                              CapnProto_capnp-rpc_LIB_TARGETS
                              ""
                              "CapnProto_capnp-rpc")

set(CapnProto_capnp-rpc_LINK_LIBS ${CapnProto_capnp-rpc_LIB_TARGETS} ${CapnProto_capnp-rpc_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT capnp-websocket FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_capnp-websocket_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_capnp-websocket_FRAMEWORKS_FOUND "${CapnProto_capnp-websocket_FRAMEWORKS}" "${CapnProto_capnp-websocket_FRAMEWORK_DIRS}")

set(CapnProto_capnp-websocket_LIB_TARGETS "")
set(CapnProto_capnp-websocket_NOT_USED "")
set(CapnProto_capnp-websocket_LIBS_FRAMEWORKS_DEPS ${CapnProto_capnp-websocket_FRAMEWORKS_FOUND} ${CapnProto_capnp-websocket_SYSTEM_LIBS} ${CapnProto_capnp-websocket_DEPENDENCIES})
conan_package_library_targets("${CapnProto_capnp-websocket_LIBS}"
                              "${CapnProto_capnp-websocket_LIB_DIRS}"
                              "${CapnProto_capnp-websocket_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_capnp-websocket_NOT_USED
                              CapnProto_capnp-websocket_LIB_TARGETS
                              ""
                              "CapnProto_capnp-websocket")

set(CapnProto_capnp-websocket_LINK_LIBS ${CapnProto_capnp-websocket_LIB_TARGETS} ${CapnProto_capnp-websocket_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT capnpc FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_capnpc_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_capnpc_FRAMEWORKS_FOUND "${CapnProto_capnpc_FRAMEWORKS}" "${CapnProto_capnpc_FRAMEWORK_DIRS}")

set(CapnProto_capnpc_LIB_TARGETS "")
set(CapnProto_capnpc_NOT_USED "")
set(CapnProto_capnpc_LIBS_FRAMEWORKS_DEPS ${CapnProto_capnpc_FRAMEWORKS_FOUND} ${CapnProto_capnpc_SYSTEM_LIBS} ${CapnProto_capnpc_DEPENDENCIES})
conan_package_library_targets("${CapnProto_capnpc_LIBS}"
                              "${CapnProto_capnpc_LIB_DIRS}"
                              "${CapnProto_capnpc_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_capnpc_NOT_USED
                              CapnProto_capnpc_LIB_TARGETS
                              ""
                              "CapnProto_capnpc")

set(CapnProto_capnpc_LINK_LIBS ${CapnProto_capnpc_LIB_TARGETS} ${CapnProto_capnpc_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})

########## COMPONENT capnp-json FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(CapnProto_capnp-json_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(CapnProto_capnp-json_FRAMEWORKS_FOUND "${CapnProto_capnp-json_FRAMEWORKS}" "${CapnProto_capnp-json_FRAMEWORK_DIRS}")

set(CapnProto_capnp-json_LIB_TARGETS "")
set(CapnProto_capnp-json_NOT_USED "")
set(CapnProto_capnp-json_LIBS_FRAMEWORKS_DEPS ${CapnProto_capnp-json_FRAMEWORKS_FOUND} ${CapnProto_capnp-json_SYSTEM_LIBS} ${CapnProto_capnp-json_DEPENDENCIES})
conan_package_library_targets("${CapnProto_capnp-json_LIBS}"
                              "${CapnProto_capnp-json_LIB_DIRS}"
                              "${CapnProto_capnp-json_LIBS_FRAMEWORKS_DEPS}"
                              CapnProto_capnp-json_NOT_USED
                              CapnProto_capnp-json_LIB_TARGETS
                              ""
                              "CapnProto_capnp-json")

set(CapnProto_capnp-json_LINK_LIBS ${CapnProto_capnp-json_LIB_TARGETS} ${CapnProto_capnp-json_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/capnproto/"
			"${CMAKE_CURRENT_LIST_DIR}/capnproto/lib/cmake/CapnProto" ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT kj TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::kj)
        add_library(CapnProto::kj INTERFACE IMPORTED)
        set_target_properties(CapnProto::kj PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_kj_INCLUDE_DIRS}")
        set_target_properties(CapnProto::kj PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_kj_LIB_DIRS}")
        set_target_properties(CapnProto::kj PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_kj_LINK_LIBS};${CapnProto_kj_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::kj PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_kj_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::kj PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_kj_COMPILE_OPTIONS_C};${CapnProto_kj_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT kj-async TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::kj-async)
        add_library(CapnProto::kj-async INTERFACE IMPORTED)
        set_target_properties(CapnProto::kj-async PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_kj-async_INCLUDE_DIRS}")
        set_target_properties(CapnProto::kj-async PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_kj-async_LIB_DIRS}")
        set_target_properties(CapnProto::kj-async PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_kj-async_LINK_LIBS};${CapnProto_kj-async_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::kj-async PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_kj-async_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::kj-async PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_kj-async_COMPILE_OPTIONS_C};${CapnProto_kj-async_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT kj-http TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::kj-http)
        add_library(CapnProto::kj-http INTERFACE IMPORTED)
        set_target_properties(CapnProto::kj-http PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_kj-http_INCLUDE_DIRS}")
        set_target_properties(CapnProto::kj-http PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_kj-http_LIB_DIRS}")
        set_target_properties(CapnProto::kj-http PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_kj-http_LINK_LIBS};${CapnProto_kj-http_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::kj-http PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_kj-http_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::kj-http PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_kj-http_COMPILE_OPTIONS_C};${CapnProto_kj-http_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT capnp TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::capnp)
        add_library(CapnProto::capnp INTERFACE IMPORTED)
        set_target_properties(CapnProto::capnp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_capnp_INCLUDE_DIRS}")
        set_target_properties(CapnProto::capnp PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_capnp_LIB_DIRS}")
        set_target_properties(CapnProto::capnp PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_capnp_LINK_LIBS};${CapnProto_capnp_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::capnp PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_capnp_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::capnp PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_capnp_COMPILE_OPTIONS_C};${CapnProto_capnp_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT capnp-rpc TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::capnp-rpc)
        add_library(CapnProto::capnp-rpc INTERFACE IMPORTED)
        set_target_properties(CapnProto::capnp-rpc PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_capnp-rpc_INCLUDE_DIRS}")
        set_target_properties(CapnProto::capnp-rpc PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_capnp-rpc_LIB_DIRS}")
        set_target_properties(CapnProto::capnp-rpc PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_capnp-rpc_LINK_LIBS};${CapnProto_capnp-rpc_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::capnp-rpc PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_capnp-rpc_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::capnp-rpc PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_capnp-rpc_COMPILE_OPTIONS_C};${CapnProto_capnp-rpc_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT capnp-websocket TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::capnp-websocket)
        add_library(CapnProto::capnp-websocket INTERFACE IMPORTED)
        set_target_properties(CapnProto::capnp-websocket PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_capnp-websocket_INCLUDE_DIRS}")
        set_target_properties(CapnProto::capnp-websocket PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_capnp-websocket_LIB_DIRS}")
        set_target_properties(CapnProto::capnp-websocket PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_capnp-websocket_LINK_LIBS};${CapnProto_capnp-websocket_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::capnp-websocket PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_capnp-websocket_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::capnp-websocket PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_capnp-websocket_COMPILE_OPTIONS_C};${CapnProto_capnp-websocket_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT capnpc TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::capnpc)
        add_library(CapnProto::capnpc INTERFACE IMPORTED)
        set_target_properties(CapnProto::capnpc PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_capnpc_INCLUDE_DIRS}")
        set_target_properties(CapnProto::capnpc PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_capnpc_LIB_DIRS}")
        set_target_properties(CapnProto::capnpc PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_capnpc_LINK_LIBS};${CapnProto_capnpc_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::capnpc PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_capnpc_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::capnpc PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_capnpc_COMPILE_OPTIONS_C};${CapnProto_capnpc_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT capnp-json TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET CapnProto::capnp-json)
        add_library(CapnProto::capnp-json INTERFACE IMPORTED)
        set_target_properties(CapnProto::capnp-json PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${CapnProto_capnp-json_INCLUDE_DIRS}")
        set_target_properties(CapnProto::capnp-json PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${CapnProto_capnp-json_LIB_DIRS}")
        set_target_properties(CapnProto::capnp-json PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${CapnProto_capnp-json_LINK_LIBS};${CapnProto_capnp-json_LINKER_FLAGS_LIST}")
        set_target_properties(CapnProto::capnp-json PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${CapnProto_capnp-json_COMPILE_DEFINITIONS}")
        set_target_properties(CapnProto::capnp-json PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${CapnProto_capnp-json_COMPILE_OPTIONS_C};${CapnProto_capnp-json_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET CapnProto::CapnProto)
        add_library(CapnProto::CapnProto INTERFACE IMPORTED)
    endif()
    set_property(TARGET CapnProto::CapnProto APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${CapnProto_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT kj BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_kj_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT kj-async BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_kj-async_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT kj-http BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_kj-http_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT capnp BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_capnp_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT capnp-rpc BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_capnp-rpc_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT capnp-websocket BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_capnp-websocket_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT capnpc BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_capnpc_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT capnp-json BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${CapnProto_capnp-json_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
